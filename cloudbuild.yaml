steps:
  # 0. Docker Build
  - name: gcr.io/cloud-builders/docker
    args:
      - build
      - '--no-cache'
      - '-t'
      - '$_AR_HOSTNAME/$PROJECT_ID/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'
      - .
      - '-f'
      - Dockerfile
    id: Build

  # 1. Docker push to Google Artifact Registry
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - '$_AR_HOSTNAME/$PROJECT_ID/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'
    id: Push

  # 2. Check Cloud SQL connectivity
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        gcloud sql instances describe ${_DB_INSTANCE} --format='value(ipAddresses.ipAddress)'
    id: ping db

  # 3. Create a Dajngo superuser
  - name: 'gcr.io/google-appengine/exec-wrapper'
    args:
      - '-i'
      - '$_AR_HOSTNAME/$PROJECT_ID/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'
      - '-s'
      - '${PROJECT_ID}:${_DEPLOY_REGION}:${_DB_INSTANCE}'
      - '-e'
      - 'GCP_SERVICE_ACCOUNT_KEY=${_GCP_SERVICE_ACCOUNT_KEY}'
      - '--'
      - 'sh'
      - '-c'
      - |
        python manage.py makesuperuser ${_DJANGO_SUPERUSER_USERNAME} ${_DJANGO_SUPERUSER_EMAIL} ${_DJANGO_SUPERUSER_PASSWORD} &&
        echo "Superuser created successfully"
    id: Create superuser



  # 4a. Check migrations
  - name: gcr.io/google-appengine/exec-wrapper
    args:
      - '-i'
      - '$_AR_HOSTNAME/$PROJECT_ID/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'
      - '-s'
      - '${PROJECT_ID}:${_DEPLOY_REGION}:${_DB_INSTANCE}'
      - '-e'
      - 'GCP_SERVICE_ACCOUNT_KEY=${_GCP_SERVICE_ACCOUNT_KEY}'
      - '-e'
      - 'SETTINGS_NAME=${_SECRET_SETTINGS_NAME}'
      - '--'
      - 'sh'
      - '-c'
      - |
        set -e
        echo "Current migration state:"
        python manage.py showmigrations
        echo "Database migrations table content:"
        python manage.py dbshell <<EOF
        SELECT * FROM django_migrations WHERE app='kp_app';
        EOF
    id: Check migration state


  # 4b. Apply migrations
  - name: gcr.io/google-appengine/exec-wrapper
    args:
      - '-i'
      - '$_AR_HOSTNAME/$PROJECT_ID/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'
      - '-s'
      - '${PROJECT_ID}:${_DEPLOY_REGION}:${_DB_INSTANCE}'
      - '-e'
      - 'GCP_SERVICE_ACCOUNT_KEY=${_GCP_SERVICE_ACCOUNT_KEY}'
      - '-e'
      - 'SETTINGS_NAME=${_SECRET_SETTINGS_NAME}'
      - 'sh'
      - '-c'
      - |
        set -e &&
        echo "Applying migrations..." &&
        python manage.py migrate &&
        echo "Migrations applied successfully"
    id: Apply migrations

  # 5. Collect static
  - name: gcr.io/google-appengine/exec-wrapper
    args:
      - '-i'
      - '$_AR_HOSTNAME/$PROJECT_ID/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'
      - '-s'
      - '${PROJECT_ID}:${_DEPLOY_REGION}:${_DB_INSTANCE}'
      - '-e'
      - 'GCP_SERVICE_ACCOUNT_KEY=${_GCP_SERVICE_ACCOUNT_KEY}'
      - '-e'
      - 'SETTINGS_NAME=${_SECRET_SETTINGS_NAME}'
      - '--'
      - 'python'
      - 'manage.py'
      - 'collectstatic'
      - '--no-input'
    id: Collect static


# 6. Deploy to Cloud Run
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: bash
    args:
      - '-c'
      - |
        gcloud run services update $_SERVICE_NAME \
        --platform=managed \
        --image=$_AR_HOSTNAME/$PROJECT_ID/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA \
        --labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=$COMMIT_SHA,gcb-build-id=$BUILD_ID,gcb-trigger-id=$_TRIGGER_ID,$_LABELS \
        --region=$_DEPLOY_REGION \
        --set-secrets=GCP_SERVICE_ACCOUNT_KEY=${_SECRET_NAME}:latest \
        --quiet
    id: Deploy


  # 7. Step to print contents of migrations directory to check migrations
  - name: 'gcr.io/google-appengine/exec-wrapper'
    args:
      - '-i'
      - '$_AR_HOSTNAME/$PROJECT_ID/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'
      - '-s'
      - '${PROJECT_ID}:${_DEPLOY_REGION}:${_DB_INSTANCE}'
      - '-e'
      - 'SETTINGS_NAME=${_SECRET_SETTINGS_NAME}'
      - '--'
      - 'sh'
      - '-c'
      - |
        echo "Contents of migrations directory:"
        ls -la /workspace/kp_app/migrations/
        echo "\nContent of each migration file:"
        for file in /workspace/kp_app/migrations/*.py; do
          if [ -f "$file" ]; then
            echo "\n--- $file ---"
            cat "$file"
          fi
        done
    id: Print migrations dir


# Store images in Google Artifact Registry
images:
  - '$_AR_HOSTNAME/$PROJECT_ID/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA'

# define where logs should be stored
# you can also have them sent to a bucket
options:
  logging: CLOUD_LOGGING_ONLY

tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - kp-run
